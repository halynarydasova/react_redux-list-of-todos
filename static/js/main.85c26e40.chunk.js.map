{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","status","query","initialState","ALL","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","useMemo","title","toLocaleLowerCase","includes","completed","className","map","id","classNames","onClick","currTodoActions","TodoFilter","value","onChange","event","filterActions","currentTarget","ACTIVE","COMPLETED","placeholder","target","trim","toLowerCase","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","author","setAuthor","useEffect","userId","currentTodoActions","href","email","name","App","isLoading","setIsLoading","result","todosAction","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85c26e40.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET': return {\n      ...action.payload,\n    };\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","// import { Status } from '../types/Status';\n\n// type FilterAll = {\n//   type: 'todos/ALL',\n//   payload: {\n//     status: Status,\n//     query: string,\n//   }\n// };\n\n// type FilterActive = {\n//   type: 'todos/ACTIVE',\n//   payload: {\n//     status: Status,\n//     query: string,\n//   }\n// };\n\n// type FilterCompleted = {\n//   type: 'todos/COMPLETED',\n//   payload: {\n//     status: Status,\n//     query: string,\n//   }\n// };\n\n// type Action = FilterAll | FilterActive | FilterCompleted;\n\n// type State = {\n//   query: string;\n//   status: Status;\n// };\n\n// const filterAll = (status: Status, query: string): FilterAll => ({\n//   type: 'todos/ALL',\n//   payload: {\n//     status,\n//     query,\n//   },\n// });\n\n// const filterActive = (status: Status, query: string): FilterActive => ({\n//   type: 'todos/ACTIVE',\n//   payload: {\n//     status,\n//     query,\n//   },\n// });\n\n// const filterComplited = (status: Status, query: string): FilterCompleted => ({\n//   type: 'todos/COMPLETED',\n//   payload: {\n//     status,\n//     query,\n//   },\n// });\n\n// export const actions = { filterAll, filterActive, filterComplited };\n// const initialState: State = {\n//   query: '',\n//   status: Status.ALL,\n// };\n\n// const filterReducer = (state: State = initialState, action: Action): State => {\n//   switch (action.type) {\n//     case 'todos/ALL':\n//       return {\n//         query: action.payload.query,\n//         status: action.payload.status,\n//       };\n\n//     case 'todos/ACTIVE':\n//       return {\n//         query: action.payload.query,\n//         status: action.payload.status,\n//       };\n\n//     case 'todos/COMPLETED':\n//       return {\n//         query: action.payload.query,\n//         status: action.payload.status,\n//       };\n\n//     default:\n//       return state;\n//   }\n// };\n\n// export default filterReducer;\nimport { Status } from '../types/Status';\n\ntype SetStatus = {\n  type: 'filter/SETSTATUS',\n  payload: Status\n};\n\ntype SetQuery = {\n  type: 'filter/SETQUERY',\n  payload: string\n};\n\ntype Action = SetStatus | SetQuery;\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst setStatus = (status: Status): SetStatus => ({\n  type: 'filter/SETSTATUS',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQuery => ({\n  type: 'filter/SETQUERY',\n  payload: query,\n});\n\nexport const actions = { setStatus, setQuery };\nconst initialState: State = {\n  query: '',\n  status: Status.ALL,\n};\n\nconst filterReducer = (state: State = initialState, action: Action): State => {\n  switch (action.type) {\n    case 'filter/SETSTATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/SETQUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddTodos = {\n  type: 'todos/ADD',\n  payload: Todo [],\n};\n\nconst addTodos = (todos: Todo[]): AddTodos => ({\n  type: 'todos/ADD',\n  payload: todos,\n});\n\nexport const actions = { addTodos };\ntype Action = AddTodos;\ntype State = [] | Todo[];\n\nconst todosReducer = (state: State = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return [...action.payload];\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport React, { useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector((state) => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const filteredTodos = useMemo(() => (\n    todos\n      .filter(todo => todo.title\n        .toLocaleLowerCase().includes(query.toLocaleLowerCase()))\n      .filter(todo => {\n        switch (status) {\n          case 'completed':\n            return todo.completed;\n\n          case 'active':\n            return !todo.completed;\n\n          default:\n            return true;\n        }\n      })\n  ), [status, todos, query]);\n\n  return (\n    <>\n      {filteredTodos\n        ? (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {filteredTodos.map(todo => {\n                const { id, title, completed } = todo;\n\n                return (\n                  <tr\n                    data-cy=\"todo\"\n                    key={id}\n                    className={classNames({\n                      'has-background-info-light': todo.id === currentTodo?.id,\n                    })}\n                  >\n                    <td className=\"is-vcentered\">{id}</td>\n                    <td className=\"is-vcentered\">\n                      {completed && (\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      )}\n                    </td>\n                    <td className=\"is-vcentered is-expanded\">\n                      <p\n                        className={classNames({\n                          'has-text-success': completed,\n                          'has-text-danger': !completed,\n                        })}\n                      >\n                        {title}\n\n                      </p>\n                    </td>\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => {\n                          if (currentTodo?.id === todo.id) {\n                            dispatch(currTodoActions.removeTodo());\n                          } else {\n                            dispatch(currTodoActions.setTodo(todo));\n                          }\n                        }}\n                      >\n                        <span className=\"icon\">\n                          <i className={classNames(\n                            'far',\n                            { 'fa-eye': id !== currentTodo?.id },\n                            { 'fa-eye-slash': id === currentTodo?.id },\n                          )}\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )\n        : (<p>No data received</p>)}\n    </>\n  );\n};\n","import React from 'react';\nimport { actions as filterActions } from '../../features/filter';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { status, query } = useAppSelector((state) => state.filter);\n\n  const handleStatusUpdate = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.currentTarget.value as Status));\n  };\n\n  const handleQueryUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value.trim().toLowerCase()));\n  };\n\n  const handleQueryReset = () => {\n    dispatch(filterActions.setQuery(''));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusUpdate}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryUpdate}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {(query !== '')\n          && (\n            <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={handleQueryReset}\n              />\n            </span>\n          )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const [author, setAuthor] = useState<User | null>(null);\n  const handleClose = () => dispatch(currentTodoActions.removeTodo());\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setAuthor);\n    }\n  }, []);\n\n  return (\n    <>\n      <div\n        className=\"modal is-active\"\n        data-cy=\"modal\"\n      >\n        <div className=\"modal-background\" />\n        {!author\n          ? (\n            <Loader />\n          )\n          : (\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  Todo #\n                  {currentTodo?.id}\n                </div>\n\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={handleClose}\n                />\n              </header>\n\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {currentTodo?.title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {currentTodo?.completed\n                    ? (<strong className=\"has-text-success\">Done</strong>)\n                    : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n                  {' by '}\n\n                  <a href={`mailto:${author?.email}`}>\n                    {author?.name}\n                  </a>\n                </p>\n              </div>\n            </div>\n          )}\n      </div>\n    </>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppSelector, useAppDispatch } from './app/hooks';\nimport { actions as todosAction } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getTodos()\n      .then(result => dispatch(todosAction.addTodos(result)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <TodoList />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo\n        && (\n          <TodoModal />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}